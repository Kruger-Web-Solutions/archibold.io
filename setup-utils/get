#!/usr/bin/env bash

#########################
# archibold.io (C) 2016 #
#########################
#
# arch-chroot env
#
# LABEL
# LANGUAGE
# DISK
# BOOT
# SWAP
# ROOT
# UEFI
# USER
# PASSWORD
# AUTOLOGIN
# EDD
# QUIET
# ENCRYPTION
#

source <(curl -s https://archibold.io/utils/partid)

cleanEfibootmgr() {
  local which="$1"
  local prev=
  for entry in $(efibootmgr); do
    if [ "$entry" = "$which" ]; then
      efibootmgr -b "${prev:4:-1}" -B
    fi
    prev="$entry"
  done
}

# Locale
if [ "$LANGUAGE" != "en" ]; then
  sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
fi
sed -i -r "s/^#(${LANGUAGE}_.*? UTF-8)/\1/" /etc/locale.gen
locale-gen
locale > /etc/locale.conf

echo -e "
  installing $(tput bold)linux$(tput sgr0)
"
pacman-key --init
pacman-key --populate archlinux
pacman -S --needed --noconfirm pacman-mirrorlist linux linux-firmware mkinitcpio
sync
if [ "$ENCRYPTION" = "yes" ]; then
  echo "build ()
{
  add_runscript
}
help ()
{
cat<<HELPEOF
  This asks for the encryption password once and then opens root and swap
HELPEOF
}" > /etc/initcpio/install/archibold

  UUID="$(partid $ROOT)"
  echo "run_hook ()
{
  mkdir -p /run/cryptsetup
  local password=
  echo -e \"\033[1mencryption\033[0m password:\"
  read -s -r password
  echo \"\$password\" | sh -c 'cryptsetup open \$(blkid --uuid $UUID) root'" > /etc/initcpio/hooks/archibold
  if [ "$SWAP" != "0" ]; then
    UUID="$(partid $SWAP)"
    echo "  echo \"\$password\" | sh -c 'cryptsetup open \$(blkid --uuid $UUID) swap'" >> /etc/initcpio/hooks/archibold
  fi
echo "  password=''
}" >> /etc/initcpio/hooks/archibold
  # apparently consolefont was useless
  sed -i -r 's/^(HOOKS=.*)/#\1\nHOOKS=(base udev autodetect keyboard keymap modconf block archibold encrypt resume filesystems fsck)/' /etc/mkinitcpio.conf
  mkinitcpio -p linux
fi

# Hardware basic needs
echo -e "
  installing $(tput bold)wifi/net tools$(tput sgr0)
"

# TODO: I am not sure wireless-regdb is useful at all ...
pacman -S --needed --noconfirm wireless-regdb
pacman -S --needed --noconfirm dialog wpa_supplicant iw netctl dhcpcd > /dev/null 2>&1

UCODE=''
UCODE_STRING=''
if [ "$(cat /proc/cpuinfo | grep GenuineIntel)" != "" ]; then
  UCODE='intel-ucode'
elif [ "$(cat /proc/cpuinfo | grep AuthenticAMD)" != "" ]; then
  UCODE='amd-ucode'
fi
if [ "$UCODE" != "" ]; then
  UCODE_STRING="initrd  /${UCODE}.img
"
  echo -e "
  installing $(tput bold)${UCODE}$(tput sgr0)
"
  pacman -S --needed --noconfirm $UCODE > /dev/null 2>&1
fi

if [ "$UEFI" = "efi32" ] || [ "$UEFI" = "efi64" ]; then
  echo -e "
  installing $(tput bold)UEFI$(tput sgr0) tools
"
  pacman -S --needed --noconfirm efibootmgr efitools > /dev/null 2>&1
fi

# Create clean fstab
if [ "$SWAP" != "0" ]; then
  if [ "$ENCRYPTION" = "yes" ]; then
    swapon /dev/mapper/swap
  else
    swapon $SWAP
  fi
fi
genfstab -U -p / > /etc/fstab

# TODO: this seemed overly useless
# if [ "$BOOT" != "" ]; then
#   sed -ie "s#$BOOT#UUID=$(partid $BOOT)#" /etc/fstab
# fi
# if [ "$SWAP" != "0" ]; then
#   sed -ie "s#$SWAP#UUID=$(partid $SWAP)#" /etc/fstab
# fi
# sed -ie "s#$ROOT#UUID=$(partid $ROOT)#" /etc/fstab

sync
sed -i -r 's/^(# )?(\/etc|efivarfs).*//' /etc/fstab
sync

if [ "$ENCRYPTION" = "yes" ]; then
  APPEND="options root=/dev/mapper/root rw"
  if [ "$SWAP" != "0" ]; then
    APPEND="$APPEND resume=/dev/mapper/swap rw"
  fi
  if [ "$BOOT_LOUDLY" = "" ]; then
    APPEND="$APPEND quiet loglevel=0"
  fi
else
  # PARTUUID="$(blkid -s PARTUUID -o value ${ROOT})"
  APPEND="options root=UUID=${UUID} rw"
  if [ "$BOOT_LOUDLY" = "" ]; then
    APPEND="$APPEND quiet splash loglevel=0 console=tty2"
  fi
fi

if [ "$EDD" != "" ]; then
  APPEND="$APPEND edd=$EDD"
fi

# UEFI
echo ''
sleep 1
if [ "$UEFI" = "efi32" ] || [ "$UEFI" = "efi64" ]; then
  cleanEfibootmgr "$LABEL"
fi
sleep 1

bootctl --path=/boot install

echo "title   ${LABEL}
linux   /vmlinuz-linux
${UCODE_STRING}initrd  /initramfs-linux.img
${APPEND}" > /boot/loader/entries/arch.conf
sleep 1

# Root and User Password

if [ "$(which yes 2> /dev/null)" = "" ]; then
  pacman -S --needed --noconfirm yes
fi

yes "$PASSWORD" | passwd

useradd -m -g users -G wheel,games,power,optical,storage,scanner,lp,audio,video -s /bin/bash $USER
yes "$PASSWORD" | passwd $USER


# Automatic login
if [ "$AUTOLOGIN" = "yes" ]; then
  sed -ie "s#ExecStart=-/sbin/agetty.*#ExecStart=-/sbin/agetty -nia $USER %I \$TERM#" /etc/systemd/system/getty.target.wants/getty@tty1.service
  touch /home/$USER/.hushlogin
  chown -R $USER:users /home/$USER/.hushlogin
fi

curl -LOs https://archibold.io/utils/so
chmod a+x so
mv so /usr/bin

curl -LOs https://archibold.io/utils/aur
chmod a+x aur
mv aur /usr/bin

if [ "$(which hwclock 2> /dev/null)" != "" ]; then
  hwclock --systohc --utc
fi

exit
